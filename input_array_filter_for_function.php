<?php
# Фильтр входных данных.

# Массива данных
$array_input = array(
  's1' => '123',
  's2' => '456',
  's4' => '789'
);

# Вызов функции и передача в неё массива данных
test($array_input);
# Вызов функции и передача в неё массива данных
test_2($array_input);





# Пример 1: подходит для передачи настроек работы функции с использованием в функции параметров по-умолчанию
public function test ($array = array()) {
    # Контрольный массив настроек
	$array_control = array(
    's1' => false,
    's2' => false,
    's3' => false
  );
		# Функция объединяет два массива по ключам (данные из ячеек второго массива записываются поверх ячеек с соответствующими ключами первого массива), новые ключи добавляются в конец массива
	$array_temp = array_merge($array_control, $array);
  echo '<br>$array_temp: ';
	print_r($array_temp);
		# Результат выполнения функции: array('s1' => '123', 's2' => '456', 's3' => false, 's4' => '789');
		# Функция оставляет ключи, которые присутствуют в обоих массивах (данные для ячеек нового массива берутся из ячеек первого массива)
	$array_temp_2 = array_intersect_key($array_temp, $array_control); # Оставляем ключи, которые присутствуют в контрольном массиве
  echo '<br>$array_temp_2: ';
	print_r($array_temp_2);
		# Результат выполнения функции: array('s1' => '123', 's2' => '456', 's3' => false);
		# Далее обработка данных идёт по значению true/false конкретной ячейки массива $array_temp_2.
  if ($array_temp_2['s1']) {
    echo '<br>Ключ s1: true';
  } else {
    echo '<br>Ключ s1: false';
  }
  if ($array_temp_2['s3']) {
    echo '<br>Ключ s3: true';
  } else {
    echo '<br>Ключ s3: false';
  }
}





# Пример 2: подходит для передачи в функцию произвольного набора данных, а также отсева неперусмотренных данных.
public function test_2 ($array = array()) {
    # Контрольный массив настроек
	$array_control = array(
    's1' => false,
    's2' => false,
    's3' => false
  );
		# Функция объединяет два массива по ключам (данные из ячеек второго массива записываются поверх ячеек с соответствующими ключами первого массива), новые ключи добавляются в конец массива
	$array_temp = array_merge($array_control, $array);
  echo '<br>$array_temp: ';
	print_r($array_temp);
		# Результат выполнения функции: array('s1' => '123', 's2' => '456', 's3' => false, 's4' => '789');
		# Функция оставляет ключи, которые присутствуют в обоих массивах (данные для ячеек нового массива берутся из ячеек первого массива)
	$array_temp_2 = array_intersect_key($array_temp, $array_control); # Оставляем ключи, которые присутствуют в контрольном массиве
  echo '<br>$array_temp_2: ';
	print_r($array_temp_2);
		# Результат выполнения функции: array('s1' => '123', 's2' => '456', 's3' => false);
	$array_temp_3 = array_intersect_key($array_temp_2, $array); # Оставляем ключи, которые присутствуют во входящем массиве
  echo '<br>$array_temp_3: ';
	print_r($array_temp_3);
		# Результат выполнения функции: array('s1' => '123', 's2' => '456');
		# Далее обработка данных идёт по существованию или отсутствию того или иного ключа в массиве $array_temp_3.
  if (isset($array_temp_3['s1'])) {
    echo '<br>Ключ s1: присутствует';
  } else {
    echo '<br>Ключ s1: отсутствует';
  }
  if (isset($array_temp_3['s3'])) {
    echo '<br>Ключ s3: присутствует';
  } else {
    echo '<br>Ключ s3: отсутствует';
  }
}
?>